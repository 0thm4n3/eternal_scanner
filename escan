#!/bin/bash  
# Eternal Scanner 2.0 by peterpt             
# https://github.com/peterpt/eternal_scanner 
#
# Eternal Scanner scans a network looking for vulnerable windows machines to the exploit CVE-2017-0144
# https://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0144
#
path=$(pwd)

#setup colors
cyan='\e[0;36m'
green='\033[92m'
red='\e[1;31m'
yellow='\e[0;33m'
orange='\e[38;5;166m'

# Set default Scanner Speed
rt="500"

# Set Default Port
port="445"

# Set Default Data directory
defdir="/usr/local/share/Eternal_Scanner"

fls="0"
if [ -d "$defdir" ] 
then
echo ""
else 
mkdir "$defdir" >/dev/null 2>&1
if [ -f "$path/vuln.txt" ]
then
mv $path/vuln.txt $defdir/ >/dev/null 2>&1
fls="1"
fi
if [ -f "$path/vuln_DP.txt" ]
then
mv $path/vuln_DP.txt $defdir/ >/dev/null 2>&1
fi
if [ -f "$path/vuln_OS.txt" ]
then
mv $path/vuln_OS.txt $defdir/ >/dev/null 2>&1
fi
echo -e "$orange" "Updated : Eternal Scanner 2.0"
echo ""
if [ $fls == "1" ]
then
echo -e "$green" "Your Eternal Scanner Data Files were moved to $defdir"
echo -e ""
echo -e "$yellow" "Press ENTER key To Continue"
read cont
echo ""
cp escan /usr/local/sbin/ >/dev/null 2>&1
cp elog /usr/local/sbin/ >/dev/null 2>&1
echo ""
echo -e "$green" "Eternal Scanner was intalled in your system"
echo ""
echo -e "$orange" "From now on , write (escan) or (escan -h) anywhere to run it."
echo ""
echo -e "$yellow" "Press ENTER key To Continue"
read cont
else
cp escan /usr/local/sbin/ >/dev/null 2>&1
cp elog /usr/local/sbin/ >/dev/null 2>&1
echo ""
echo -e "$green" "Eternal Scanner was intalled in your system"
echo ""
echo -e "$orange" "From now on , write (escan) or (escan -h) anywhere to run it."
echo ""
echo -e "$yellow" "Press ENTER key To Continue"
read cont
fi
fi

# CTRL+C Interrupt for scanner
trap ctrl_c INT
function ctrl_c() {
if [ "$stat" == "0" ]
then
clear
exit 1
elif [ "$stat" == "1" ]
then
pkill -f masscan* >/dev/null 2>&1
fi
}

#Function activated when ip list is bigger than 500 ips to scan

splt(){
echo ""
echo -e "$orange" "More than $lc ips detected to be scanned"
echo -e "$green" "Splitting MSF Scanning in $tms tasks to avoid errors"
for i in $(seq "$tms")
do
rm $defdir/msf.rc >/dev/null 2>&1  
echo "spool $defdir/msflog.log" > $defdir/msf.rc
echo "use auxiliary/scanner/smb/smb_ms17_010" >> $defdir/msf.rc
paste -sd, $defdir/x$i            \
|sed 's/^/set rhosts /; s/,/, /g'  \
>>$defdir/msf.rc
echo "set rport $port" >> $defdir/msf.rc
echo "set threads 5" >> $defdir/msf.rc
echo "exploit" >> $defdir/msf.rc
echo "quit -y" >> $defdir/msf.rc
echo ""

#count number of lines in 1st splitted ip list

lc=`cat $defdir/x$i | wc -l`
echo -e "$green" "Checking ip list $i of $tms"
echo -e "$yellow" "----------------------------"
cat $defdir/x$i
echo -e "$yellow" "----------------------------"
echo ""
echo -e "$green" "Press CTRL-C (1X ONLY) if you want to stop vulnerability check on task $i"
echo -e "$green" "(aborting this process now will not verify all ips in task $i of $tms)"
echo ""
echo -e "\033[33;7mPlease Wait , checking $lc ips from task $i of $tms may take a while\033[0m"
stat="2"

# Execute msfconsole script , get PID from msfconsole and start elog

msfconsole -r $defdir/msf.rc >/dev/null 2>&1 & echo $! > $defdir/pid.tmp & ./elog
sleep 2

# At this point metasploit already finished all ips scan

# vuln variable used to grab all positive results for displaying and write in vuln.txt file
vuln=`cat $defdir/msflog.log | grep "MS17-010" | awk '{print$2}'`

#vuln1 variable used only to check if any positive results were found

vuln1=`cat $defdir/msflog.log | grep "MS17-010" | awk '{print$2}' | sed -n 1p`
if [ -z "$vuln1" ]
then
echo ""
echo -e "$yellow" "No vulnerable targets were found on task $i of $tms"

# Remove all temp files
rm -rf $defdir/msflog.log >/dev/null 2>&1
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x$i >/dev/null 2>&1
else

# Positive results found , define op variable as output file to be written
op="$defdir/vuln.txt"

#Check if vulnerability list file exists 

if [ -f "$op" ]; then

# vuln.txt exists , copy all msflog positive results to a temporary file

echo "$vuln" > $defdir/temp.txt
rm -f $defdir/msflog.log >/dev/null 2>&1

# Open the temporary file and filter all ips to one on each line
tr " " "\n" <$defdir/temp.txt >$defdir/temp1.txt

#Write new detections to last line in vuln.txt

tr " " "\n" <$defdir/temp.txt >>$defdir/vuln.txt

# Remove duplicates
 
awk '!a[$0]++' $defdir/vuln.txt > $defdir/vuln1.txt 2>&1

# Remove old vuln.txt file and write the new one with ordered ips
rm -f $defdir/vuln.txt && mv $defdir/vuln1.txt $defdir/vuln.txt >/dev/null 2>&1
else
echo $vuln > $defdir/temp.txt
 rm -f $defdir/msflog.log >/dev/null 2>&1
tr " " "\n" <$defdir/temp.txt >$defdir/temp1.txt

#no vuln. file exists , create a new one
echo "Vulnerable Ips to Eternal Blue exploit (MS17-010) - Scanned by Eternal Scanner" > $op 
echo "------------------------------------------------------------------------------" >> $op
tr " " "\n" <$defdir/temp1.txt >>$defdir/vuln.txt
awk '!a[$0]++' $defdir/vuln.txt > $defdir/vuln1.txt 2>&1
rm -f $defdir/vuln.txt && mv $defdir/vuln1.txt $defdir/vuln.txt >/dev/null 2>&1
fi

# count number of lines in file
lm=`cat $defdir/temp1.txt | wc -l`
echo ""
echo -e $green "$lm Vulnerable ips found"
echo "---------------------------------------"
# Display the positive results
cat $defdir/temp1.txt
echo "---------------------------------------"
echo -e $yellow "Eternal Scanner saved from task $i of $tms the vulnerable ips to $defdir/vuln.txt"
sleep 3

#Delete temp files
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x$i >/dev/null 2>&1
fi
done
exit 1
}
chkf() {
#Check dependencies
which msfconsole > /dev/null 2>&1
      if [ "$?" -eq "0" ]; then
      echo
else
   echo -e "$red" "Metasploit Framework Missing"
exit 1
fi  
which masscan > /dev/null 2>&1
      if [ "$?" -eq "0" ]; then
      echo
else
   echo -e "$red" "Masscan Missing"
exit 1
fi 

stat="0"  

# Logo     
echo -e "$green" " ▄▄▄ .▄▄▄▄▄▄▄▄ .▄▄▄   ▐ ▄  ▄▄▄· ▄▄▌    "     
echo -e "$green" " ▀▄.▀·•██  ▀▄.▀·▀▄ █·•█▌▐█▐█ ▀█ ██•    "   
echo -e "$green" " ▐▀▀▪▄ ▐█.▪▐▀▀▪▄▐▀▀▄ ▐█▐▐▌▄█▀▀█ ██▪    "   
echo -e "$green" " ▐█▄▄▌ ▐█▌·▐█▄▄▌▐█•█▌██▐█▌▐█ ▪▐▌▐█▌▐▌  "   
echo -e "$green" "  ▀▀▀  ▀▀▀  ▀▀▀ .▀  ▀▀▀ █▪ ▀  ▀ .▀▀▀   "   
echo -e "$green" " .▄▄ ·  ▄▄·  ▄▄▄·  ▐ ▄  ▐ ▄ ▄▄▄ .▄▄▄   "   
echo -e "$green" " ▐█ ▀. ▐█ ▌▪▐█ ▀█ •█▌▐█•█▌▐█▀▄.▀·▀▄ █· "   
echo -e "$green" " ▄▀▀▀█▄██ ▄▄▄█▀▀█ ▐█▐▐▌▐█▐▐▌▐▀▀▪▄▐▀▀▄  "   
echo -e "$green" " ▐█▄▪▐█▐███▌▐█ ▪▐▌██▐█▌██▐█▌▐█▄▄▌▐█•█▌ "   
echo -e "$green" "  ▀▀▀▀ ·▀▀▀  ▀  ▀ ▀▀ █▪▀▀ █▪ ▀▀▀ .▀  ▀$yellow 2.0"
echo ""
echo -e "$orange" "(-c) $vl (switch activated , checking ...)"

# Remove temp files
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/temp1.txt >/dev/null 2>&1
rm -f $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x* >/dev/null 2>&1
sleep 2

# Tell metasploit to create a log file
echo "spool $defdir/msflog.log" > $defdir/msf.rc

# Tell metasploit to use eternal blue scanner
echo "use auxiliary/scanner/smb/smb_ms17_010" >> $defdir/msf.rc

# Paste all ips from msfip file to msf.rc execution script
paste -sd, $defdir/msfip            \
|sed 's/^/set RHOSTS /; s/,/, /g'  \
>>$defdir/msf.rc
echo "set rport $port" >> $defdir/msf.rc
echo "exploit" >> $defdir/msf.rc

# Automatically exits metasploit when done
echo "quit -y" >> $defdir/msf.rc

echo ""
echo -e "$orange" "       Checking ips :"
echo -e "$yellow" "----------------------------"
echo -e "$green" ""
cat $defdir/msfip
echo ""
echo -e "$yellow" "----------------------------"
lc=`cat $defdir/msfip | wc -l`
echo "Checking $lc ips"
echo ""
echo -e "$yellow" "Checking if the $lc ips are vulnerable"
echo ""
echo -e "$green" "Press CTRL-C (1X ONLY) if you want to stop ips vulnerability check"
echo -e "$green" "(aborting this process now will not verify all collected ips)"
echo ""
echo -e "\033[33;7mPlease Wait , checking $lc ips may take a while\033[0m"
stat="2"
msfconsole -r $defdir/msf.rc >/dev/null 2>&1 & echo $! > $defdir/pid.tmp & elog
sleep 2
vuln=`cat $defdir/msflog.log | grep "MS17-010" | awk '{print$2}'`
#Check if msf logs got any positive result
vuln1=`cat $defdir/msflog.log | grep "MS17-010" | awk '{print$2}' | sed -n 1p`
vuln2=`cat $defdir/msflog.log | grep "MS17-010" | awk '{$1=$3=$4=$5=$6=$7=$8=$9=""; print $0}'`
vuln3=`cat $defdir/msflog.log | grep "Arch" | awk '{$1=$3=$4=$5=$6=$7=$8=$9=$10=$11=$13=$14=$15=$16=""; print $0}'`
if [ -z "$vuln1" ]
then
echo ""
echo -e "$red" "No vulnerable targets were detected from the list "
rm -rf $defdir/msflog.log >/dev/null 2>&1
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x* >/dev/null 2>&1
else
vos="$defdir/vuln_OS.txt"
vtmp="$defdir/vuln_OS_tmp.txt"
if [ ! -f $vos ]
then
echo "Vulnerable Ips to Eternal Blue exploit (MS17-010) - Scanned by Eternal Scanner" > $vtmp
echo "------------------------------------------------------------------------------" >> $vtmp
echo "             Detailed Vulnerable IP & Operating System File                   " >> $vtmp
echo "+----------------------------------------------------------------------------+" >> $vtmp
echo "$vuln2" >> "$vtmp"
awk '!a[$0]++' $defdir/vuln_OS_tmp.txt > $defdir/vuln_OS.txt 2>&1
rm -f $defdir/vuln_OS_tmp.txt >/dev/null 2>&1
else
echo "$vuln2" > "$vtmp"
awk '!a[$0]++' $defdir/vuln_OS_tmp.txt >> $defdir/vuln_OS.txt 2>&1
rm -f $defdir/vuln_OS_tmp.txt >/dev/null 2>&1
fi
echo "$vuln" > $defdir/temp.txt
rm -f $defdir/msflog.log >/dev/null 2>&1
tr " " "\n" <$defdir/temp.txt >$defdir/temp1.txt
of="$defdir/vulnch.txt"

echo "Vulnerable Ips to Eternal Blue exploit (MS17-010) - Scanned by Eternal Scanner" > $of
echo "------------------------------------------------------------------------------" >> $of
tr " " "\n" <$defdir/temp1.txt >>$defdir/vulnch.txt
awk '!a[$0]++' $defdir/vulnch.txt > $defdir/vuln1.txt 2>&1
rm -f $defdir/vulnch.txt && mv $defdir/vuln1.txt $defdir/vuln.txt >/dev/null 2>&1

# count number of lines in file
lm=`cat $defdir/temp1.txt | wc -l`
echo ""
echo -e $green "$lm are still vulnerable."
echo "---------------------------------------"
cat $defdir/temp1.txt
echo "---------------------------------------"
echo -e "$yellow" "Eternal Scanner saved an updated file with vulnerable ips to :"
echo -e "$green" "$defdir/vuln.txt"
echo ""
echo -e $yellow "Eternal Scanner saved a detailed IP & OS vulnerable file to :"
echo -e "$green" "$defdir/vuln_OS.txt"
fi
vdp="$defdir/vuln_DP.txt"
vtmp="$defdir/vuln_DP_tmp.txt"
if [ -z "$vuln3" ]
then
echo ""
echo -e "$red" "No DoublePulsar implanted Targets found "
rm -rf $defdir/msflog.log >/dev/null 2>&1
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x* >/dev/null 2>&1
else
if [ ! -f $vdp ]
then
echo "Vulnerable Ips to Eternal Blue exploit (MS17-010) - Scanned by Eternal Scanner" > $vtmp
echo "------------------------------------------------------------------------------" >> $vtmp
echo "             Doublepulsar Implanted Hosts & Architectures                     " >> $vtmp
echo "+----------------------------------------------------------------------------+" >> $vtmp
echo "$vuln3" >> "$vtmp"
awk '!a[$0]++' $defdir/vuln_DP_tmp.txt > $defdir/vuln_DP.txt 2>&1
rm -f $defdir/vuln_DP_tmp.txt >/dev/null 2>&1
else
echo "$vuln3" > "$vtmp"
awk '!a[$0]++' $defdir/vuln_DP_tmp.txt >> $defdir/vuln_DP.txt 2>&1
rm -f $defdir/vuln_DP_tmp.txt >/dev/null 2>&1
fi
fi
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x* >/dev/null 2>&1
exit 0
}
start (){

#Check dependencies
which msfconsole > /dev/null 2>&1
      if [ "$?" -eq "0" ]; then
      echo
else
   echo -e "$red" "Metasploit Framework Missing"
exit 1
fi  
which masscan > /dev/null 2>&1
      if [ "$?" -eq "0" ]; then
      echo
else
   echo -e "$red" "Masscan Missing"
exit 1
fi 

stat="0"       
echo -e "$green" " ▄▄▄ .▄▄▄▄▄▄▄▄ .▄▄▄   ▐ ▄  ▄▄▄· ▄▄▌    "     
echo -e "$green" " ▀▄.▀·•██  ▀▄.▀·▀▄ █·•█▌▐█▐█ ▀█ ██•    "   
echo -e "$green" " ▐▀▀▪▄ ▐█.▪▐▀▀▪▄▐▀▀▄ ▐█▐▐▌▄█▀▀█ ██▪    "   
echo -e "$green" " ▐█▄▄▌ ▐█▌·▐█▄▄▌▐█•█▌██▐█▌▐█ ▪▐▌▐█▌▐▌  "   
echo -e "$green" "  ▀▀▀  ▀▀▀  ▀▀▀ .▀  ▀▀▀ █▪ ▀  ▀ .▀▀▀   "   
echo -e "$green" " .▄▄ ·  ▄▄·  ▄▄▄·  ▐ ▄  ▐ ▄ ▄▄▄ .▄▄▄   "   
echo -e "$green" " ▐█ ▀. ▐█ ▌▪▐█ ▀█ •█▌▐█•█▌▐█▀▄.▀·▀▄ █· "   
echo -e "$green" " ▄▀▀▀█▄██ ▄▄▄█▀▀█ ▐█▐▐▌▐█▐▐▌▐▀▀▪▄▐▀▀▄  "   
echo -e "$green" " ▐█▄▪▐█▐███▌▐█ ▪▐▌██▐█▌██▐█▌▐█▄▄▌▐█•█▌ "   
echo -e "$green" "  ▀▀▀▀ ·▀▀▀  ▀  ▀ ▀▀ █▪▀▀ █▪ ▀▀▀ .▀  ▀$yellow 2.0"
echo ""
echo -e "$orange" "For switches write (escan -h) in your terminal"
echo -e "$yellow" "Scanning for hosts with port $port opened and at $rt pkt/s"
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/temp1.txt >/dev/null 2>&1
rm -f $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x* >/dev/null 2>&1
mass="$defdir/masscan"
echo ""
echo -e "$orange" "Enter IP or IP range to scan ex: 192.168.1.32 or 192.168.1.1/24"
echo -ne "$green" "IP/IP Range : ";tput sgr0
read -r ip
echo ""
val0="0.0.0.0"
if [ "$ip" == "$val0" ]
then
echo -e "$red" "$ip is not valid"
exit 1
fi
val="0.0.0.0/0"
if [ "$ip" == "$val" ]
then
echo -e "$cyan" "Scanning the whole internet will take hours to finish"
echo ""
echo -ne "$green" "Do you still want to continue ? (y/N) : ";tput sgr0
read -r opt
echo ""
case "$opt" in
y|Y|yes|YES|Yes)
echo -e "$green" "Press CTRL-C (1X ONLY) if you want to stop the scanner "
echo ""
echo  -ne "\033[33;7mScanning $ip , Please Wait\033[0m"
stat="1"
masscan "$ip" -p "$port" --rate "$rt" --exclude 255.255.255.255 --output-filename "$mass" >/dev/null 2>&1
;;
n|N|No|NO)
exit 1
;;
*)
exit 1
;;
esac
else
echo -e "$green" "Press CTRL-C (1X ONLY) if you want to stop the scanner "
echo ""
echo  -ne "\033[33;7mScanning $ip , Please Wait\033[0m"
stat="1"
masscan "$ip" -p "$port" --rate "$rt" --output-filename "$mass" >/dev/null 2>&1
fi
echo ""

#Check if masscan created an output file
if [ ! -f "$mass" ]
then
echo -e "$yellow" "Scanner results not found"
exit 1
fi

#parser masscan output and grab only the ips
cat "$mass" | grep 'addr=' | awk '{print $3}' | sed -e s/addr=//g |  cut -d '"' -f 2 | tr " " "\n" >$defdir/msfip
msfips="$defdir/msfip"

#check if there was any ip detected with port $port opened
if [ ! -s "$msfips" ]
then
echo -e "$yellow" "Scanner did not detect any host on this $ip with port $port opened."
exit 1
fi
stat="0"
echo ""
echo -e "$orange" "       Checking ips :"
echo -e "$yellow" "----------------------------"
echo -e "$green" ""
cat "$defdir/msfip"
echo ""
echo -e "$yellow" "----------------------------"
lc=`cat $defdir/msfip | wc -l`
echo "Collected $lc ips"
echo -e "$yellow" "Checking if the $lc ips above are vulnerable"

# If scanner ip list is bigger than 500 ips , then split the msfip list in multiple files with 500 ips each one
if [ "$lc" -gt "500" ]
then
split -d -l 500 $defdir/msfip $defdir/x
tms=`ls -l $defdir/x* | wc -l`
for i in $(seq 0 "$tms")
do
tm=$((i+1))
if [ "$tm" == "11" ]
then
mv $defdir/x$i $defdir/x$tm >/dev/null 2>&1
else
mv $defdir/x0$i $defdir/x$tm >/dev/null 2>&1
fi
done
tms=`ls -l $defdir/x* | wc -l`
splt
fi
if "$lc" -gt "20" ]
then
thr="5"
else
thr="1"
fi
echo ""
#metasploit execution script
echo "spool $defdir/msflog.log" > $defdir/msf.rc
echo "use auxiliary/scanner/smb/smb_ms17_010" >> $defdir/msf.rc
paste -sd, $defdir/msfip            \
|sed 's/^/set rhosts /; s/,/, /g'  \
>>$defdir/msf.rc
echo "set rport $port" >> $defdir/msf.rc
echo "set threads $thr" >> $defdir/msf.rc
echo "exploit" >> $defdir/msf.rc
echo "quit -y" >> $defdir/msf.rc
echo ""
echo -e "$green" "Press CTRL-C (1X ONLY) if you want to stop ips vulnerability check"
echo -e "$green" "(aborting this process now will not verify all collected ips)"
echo ""
echo -e "\033[33;7mPlease Wait , checking $lc ips may take a while\033[0m"
stat="2"
msfconsole -r $defdir/msf.rc >/dev/null 2>&1 & echo $! > $defdir/pid.tmp & elog
sleep 2
vuln=`cat $defdir/msflog.log | grep "MS17-010" | awk '{print$2}'`
#Check if msf logs got any positive result
vuln1=`cat $defdir/msflog.log | grep "MS17-010" | awk '{print$2}' | sed -n 1p`
if [ -z "$vuln1" ]
then
echo ""
echo -e "$red" "No vulnerable targets were found on : $ip range"
rm -rf $defdir/msflog.log >/dev/null 2>&1
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x* >/dev/null 2>&1
exit 1
else
op="$defdir/vuln.txt"

#Check if vulnerability list file exists in ES
if [ -f "$op" ]; then
echo "$vuln" > $defdir/temp.txt
rm -f $defdir/msflog.log >/dev/null 2>&1
tr " " "\n" <$defdir/temp.txt >$defdir/temp1.txt

#Write new detections to last line in vuln.txt
tr " " "\n" <$defdir/temp.txt >>$defdir/vuln.txt
awk '!a[$0]++' $defdir/vuln.txt > $defdir/vuln1.txt 2>&1
rm -f $defdir/vuln.txt && mv $defdir/vuln1.txt $defdir/vuln.txt >/dev/null 2>&1
else
echo $vuln > $defdir/temp.txt
 rm -f $defdir/msflog.log >/dev/null 2>&1
tr " " "\n" <$defdir/temp.txt >$defdir/temp1.txt

#no vuln. file exists , create a new one
echo "Vulnerable Ips to Eternal Blue exploit (MS17-010) - Scanned by Eternal Scanner" > $op 
echo "------------------------------------------------------------------------------" >> $op
tr " " "\n" <$defdir/temp1.txt >>$defdir/vuln.txt
awk '!a[$0]++' $defdir/vuln.txt > $defdir/vuln1.txt 2>&1
rm -f $defdir/vuln.txt && mv $defdir/vuln1.txt $defdir/vuln.txt >/dev/null 2>&1
fi

# count number of lines in file
lm=`cat $defdir/temp1.txt | wc -l`
echo ""
echo -e $green "$lm Vulnerable ips found"
echo "---------------------------------------"
cat $defdir/temp1.txt
echo "---------------------------------------"
echo -e $yellow "Eternal Scanner saved a file with vulnerable ips to $defdir/vuln.txt"

#Delete temp files
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
fi
exit 1
}

ips (){

#Check dependencies
which msfconsole > /dev/null 2>&1
      if [ "$?" -eq "0" ]; then
      echo
else
   echo -e "$red" "Metasploit Framework Missing"
exit 1
fi  
which masscan > /dev/null 2>&1
      if [ "$?" -eq "0" ]; then
      echo
else
   echo -e "$red" "Masscan Missing"
exit 1
fi 

stat="0"       
echo -e "$green" " ▄▄▄ .▄▄▄▄▄▄▄▄ .▄▄▄   ▐ ▄  ▄▄▄· ▄▄▌    "     
echo -e "$green" " ▀▄.▀·•██  ▀▄.▀·▀▄ █·•█▌▐█▐█ ▀█ ██•    "   
echo -e "$green" " ▐▀▀▪▄ ▐█.▪▐▀▀▪▄▐▀▀▄ ▐█▐▐▌▄█▀▀█ ██▪    "   
echo -e "$green" " ▐█▄▄▌ ▐█▌·▐█▄▄▌▐█•█▌██▐█▌▐█ ▪▐▌▐█▌▐▌  "   
echo -e "$green" "  ▀▀▀  ▀▀▀  ▀▀▀ .▀  ▀▀▀ █▪ ▀  ▀ .▀▀▀   "   
echo -e "$green" " .▄▄ ·  ▄▄·  ▄▄▄·  ▐ ▄  ▐ ▄ ▄▄▄ .▄▄▄   "   
echo -e "$green" " ▐█ ▀. ▐█ ▌▪▐█ ▀█ •█▌▐█•█▌▐█▀▄.▀·▀▄ █· "   
echo -e "$green" " ▄▀▀▀█▄██ ▄▄▄█▀▀█ ▐█▐▐▌▐█▐▐▌▐▀▀▪▄▐▀▀▄  "   
echo -e "$green" " ▐█▄▪▐█▐███▌▐█ ▪▐▌██▐█▌██▐█▌▐█▄▄▌▐█•█▌ "   
echo -e "$green" "  ▀▀▀▀ ·▀▀▀  ▀  ▀ ▀▀ █▪▀▀ █▪ ▀▀▀ .▀  ▀$yellow 2.0"
echo ""
echo -e "$orange" "For switches write ./escan -h in your terminal"
echo -e "$yellow" "Scanning $ip with port $port opened and at $rt pkt/s"
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/temp1.txt >/dev/null 2>&1
rm -f $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x* >/dev/null 2>&1
mass="$defdir/masscan"
echo ""
val0="0.0.0.0"
if [ "$ip" == "$val0" ]
then
echo -e "$red" "$ip is not valid"
exit 1
fi
val="0.0.0.0/0"
if [ "$ip" == "$val" ]
then
echo -e "$cyan" "Scanning the whole internet will take hours to finish"
echo ""
echo -ne "$green" "Do you still want to continue ? (y/N) : ";tput sgr0
read -r opt
echo ""
case "$opt" in
y|Y|yes|YES|Yes)
echo -e "$green" "Press CTRL-C (1X ONLY) if you want to stop the scanner "
echo ""
echo  -ne "\033[33;7mScanning $ip , Please Wait\033[0m"
stat="1"
masscan "$ip" -p "$port" --rate "$rt" --exclude 255.255.255.255 --output-filename "$mass" >/dev/null 2>&1
;;
n|N|No|NO)
exit 1
;;
*)
exit 1
;;
esac
else
echo -e "$green" "Press CTRL-C (1X ONLY) if you want to stop the scanner "
echo ""
echo  -ne "\033[33;7mScanning $ip , Please Wait\033[0m"
stat="1"
masscan "$ip" -p "$port" --rate "$rt" --output-filename "$mass" >/dev/null 2>&1
fi
echo ""

#Check if masscan created an output file
if [ ! -f "$mass" ]
then
echo -e "$yellow" "Scanner results not found"
exit 1
fi

#parser masscan output and grab only the ips
cat "$mass" | grep 'addr=' | awk '{print $3}' | sed -e s/addr=//g |  cut -d '"' -f 2 | tr " " "\n" >$defdir/msfip
msfips="$defdir/msfip"

#check if there was any ip detected with port $port opened
if [ ! -s "$msfips" ]
then
echo -e "$yellow" "Scanner did not detect any host on this $ip with port $port opened."
exit 1
fi
stat="0"
echo ""
echo -e "$orange" "       Checking ips :"
echo -e "$yellow" "----------------------------"
echo -e "$green" ""
cat "$defdir/msfip"
echo ""
echo -e "$yellow" "----------------------------"
lc=`cat $defdir/msfip | wc -l`
echo "Collected $lc ips"
echo -e "$yellow" "Checking if the $lc ips above are vulnerable"

# If scanner ip list is bigger than 500 ips , then split the msfip list in multiple files with 500 ips each one
if [ "$lc" -gt "500" ]
then
split -d -l 500 $defdir/msfip $defdir/x
tms=`ls -l $defdir/x* | wc -l`
for i in $(seq 0 "$tms")
do
tm=$((i+1))
if [ "$tm" == "11" ]
then
mv $defdir/x$i $defdir/x$tm >/dev/null 2>&1
else
mv $defdir/x0$i $defdir/x$tm >/dev/null 2>&1
fi
done
tms=`ls -l $defdir/x* | wc -l`
splt
fi
echo ""
#metasploit execution script
echo "spool $defdir/msflog.log" > $defdir/msf.rc
echo "use auxiliary/scanner/smb/smb_ms17_010" >> $defdir/msf.rc
paste -sd, $defdir/msfip            \
|sed 's/^/set rhosts /; s/,/, /g'  \
>>$defdir/msf.rc
echo "set rport $port" >> $defdir/msf.rc
echo "exploit" >> $defdir/msf.rc
echo "quit -y" >> $defdir/msf.rc
echo ""
echo -e "$green" "Press CTRL-C (1X ONLY) if you want to stop ips vulnerability check"
echo -e "$green" "(aborting this process now will not verify all collected ips)"
echo ""
echo -e "\033[33;7mPlease Wait , checking $lc ips may take a while\033[0m"
stat="2"
msfconsole -r $defdir/msf.rc >/dev/null 2>&1 & echo $! > $defdir/pid.tmp & elog
sleep 2
vuln=`cat $defdir/msflog.log | grep "MS17-010" | awk '{print$2}'`
#Check if msf logs got any positive result
vuln1=`cat $defdir/msflog.log | grep "MS17-010" | awk '{print$2}' | sed -n 1p`
if [ -z "$vuln1" ]
then
echo ""
echo -e "$red" "No vulnerable targets were found on : $ip range"
rm -rf $defdir/msflog.log >/dev/null 2>&1
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
rm -f $defdir/x* >/dev/null 2>&1
exit 1
else
op="$defdir/vuln.txt"

#Check if vulnerability list file exists in ES
if [ -f "$op" ]; then
echo "$vuln" > $defdir/temp.txt
rm -f $defdir/msflog.log >/dev/null 2>&1
tr " " "\n" <$defdir/temp.txt >$defdir/temp1.txt

#Write new detections to last line in vuln.txt
tr " " "\n" <$defdir/temp.txt >>$defdir/vuln.txt
awk '!a[$0]++' $defdir/vuln.txt > $defdir/vuln1.txt 2>&1
rm -f $defdir/vuln.txt && mv $defdir/vuln1.txt $defdir/vuln.txt >/dev/null 2>&1
else
echo $vuln > $defdir/temp.txt
 rm -f $defdir/msflog.log >/dev/null 2>&1
tr " " "\n" <$defdir/temp.txt >$defdir/temp1.txt

#no vuln. file exists , create a new one
echo "Vulnerable Ips to Eternal Blue exploit (MS17-010) - Scanned by Eternal Scanner" > $op 
echo "------------------------------------------------------------------------------" >> $op
tr " " "\n" <$defdir/temp1.txt >>$defdir/vuln.txt
awk '!a[$0]++' $defdir/vuln.txt > $defdir/vuln1.txt 2>&1
rm -f $defdir/vuln.txt && mv $defdir/vuln1.txt $defdir/vuln.txt >/dev/null 2>&1
fi

# count number of lines in file
lm=`cat $defdir/temp1.txt | wc -l`
echo ""
echo -e $green "$lm Vulnerable ips found"
echo "---------------------------------------"
cat $defdir/temp1.txt
echo "---------------------------------------"
echo -e $yellow "Eternal Scanner saved a file with vulnerable ips to $defdir/vuln.txt"

#Delete temp files
rm -rf $defdir/temp1.txt >/dev/null 2>&1
rm -rf $defdir/temp.txt >/dev/null 2>&1
rm -f $defdir/masscan  >/dev/null 2>&1
rm -f $defdir/msfip  >/dev/null 2>&1
rm -f $defdir/msf.rc  >/dev/null 2>&1
rm -f $defdir/msflog.log >/dev/null 2>&1
rm -f $defdir/paused.conf >/dev/null 2>&1
rm -f $defdir/pid.tmp >/dev/null 2>&1
fi
exit 1
}

# escan only written in terminal
if [ -z "$1" ]
then
start
fi

if [ "$1" == "-i" ]
then

#User wrote escan -i , now check if user wrote any value ahead the -i switch
if [ -z "$2" ]
then
escan -h
echo -e "$yellow" "Value missing"
echo ""
echo -e "$green" "Try (escan -i 192.168.1.1)"
exit 1
else
ip="$2"
if [ -z "$3" ]
then
ips
else
if [ "$3" == "-s" ]
then
if [ -z "$4" ]
then
ips
else
if [ "$4" -ge 100 -a "$4" -le 100000000 ]
then
rt="$4"
ips
else
echo "Invalid argument , write ./escan -h for help"
exit 1
fi
fi
fi
fi
fi
fi
# esvan -h writen in terminal
if [ "$1" == "-h" ]
then
echo "Eternal Scanner 2.0 - 2017"
echo "(https://github.com/peterpt/eternal_scanner)"
echo "----------------------------------------------------"
echo "Available Switches :"
echo ""
echo "escan -i 192.168.1.1/24 (Scan Ip/Ip Range)"
echo "escan -s (Scanner speed Min: 100 Max: 10000000 /Default : 500"
echo "escan -c (Verify if ips in vuln.txt are still vulnerable & update list)"
echo "escan -c /someiplistfile.txt (Will check current user manual ip list)"
echo "escan -h This screen"
echo ""
echo "Example : escan -i 192.68.1.1/24 -s 3000 (for 3000 packets /s)"
echo ""
exit 1
fi

out=$2

#Define default vulnerable eternal scanner ip list
vl="$defdir/vuln.txt"

# check if user have writen in terminal escan -c
if [ "$1" == "-c" ]
then

#User wrote escan -c , now check if user wrote any value ahead the -c switch
if [ -z "$out" ]
then

# User input was escan -c , but no value was written ahead , so set vuln.txt as a default file to be checked
if [ ! -f "$vl" ]
then
echo ""
echo -e "$red" "Vulnerable file does not exist yet."
exit 1
fi
cp $defdir/vuln.txt $defdir/vuln.bak >/dev/null 2>&1
cp $defdir/vuln_OS.txt $defdir/vuln_OS.bak >/dev/null 2>&1
cp $defdir/vuln_DP.txt $defdir/vuln_DP.bak >/dev/null 2>&1
rm -f $defdir/vuln_OS.txt >/dev/null 2>&1
rm -f $defdir/vuln_DP.txt >/dev/null 2>&1
msfi="$defdir/msfip"
tempf=`tail -n+3 $vl | sed -e "s/:445//g"`
echo $tempf > $defdir/vuln1.txt
tr " " "\n" <$defdir/vuln1.txt >$msfi
rm -f $defdir/vuln1.txt >/dev/null 2>&1
vl="$defdir/vuln.txt"
chkf
else

# User wrote on terminal escan -c (iplist file) , check if the path of user ip list exists
if [ -f $out ]
then

# User ip lists exists , copy that list to eternal scanner path as filename msfip
cp "$out" "$defdir/msfip"

# Check if msfip ip list have more than 500 ips , and split that file in multiple files if necessary
msfi=`cat $defdir/msfip | wc -l`
if [ "$msfi" -gt "500" ]
then
split -d -l 500 $defdir/msfip $defdir/x
tms=`ls -l $defdir/x0* | wc -l`
for i in $(seq 0 "$tms")
do
tm=$((i+1))
if [ "$tm" == "11" ]
then
mv $defdir/x0$i $defdir/x$tm >/dev/null 2>&1
else
mv $defdir/x0$i $defdir/x$tm >/dev/null 2>&1
fi
done
tms=`ls -l $defdir/x* | wc -l`
echo -e "$green" " ▄▄▄ .▄▄▄▄▄▄▄▄ .▄▄▄   ▐ ▄  ▄▄▄· ▄▄▌    "     
echo -e "$green" " ▀▄.▀·•██  ▀▄.▀·▀▄ █·•█▌▐█▐█ ▀█ ██•    "   
echo -e "$green" " ▐▀▀▪▄ ▐█.▪▐▀▀▪▄▐▀▀▄ ▐█▐▐▌▄█▀▀█ ██▪    "   
echo -e "$green" " ▐█▄▄▌ ▐█▌·▐█▄▄▌▐█•█▌██▐█▌▐█ ▪▐▌▐█▌▐▌  "   
echo -e "$green" "  ▀▀▀  ▀▀▀  ▀▀▀ .▀  ▀▀▀ █▪ ▀  ▀ .▀▀▀   "   
echo -e "$green" " .▄▄ ·  ▄▄·  ▄▄▄·  ▐ ▄  ▐ ▄ ▄▄▄ .▄▄▄   "   
echo -e "$green" " ▐█ ▀. ▐█ ▌▪▐█ ▀█ •█▌▐█•█▌▐█▀▄.▀·▀▄ █· "   
echo -e "$green" " ▄▀▀▀█▄██ ▄▄▄█▀▀█ ▐█▐▐▌▐█▐▐▌▐▀▀▪▄▐▀▀▄  "   
echo -e "$green" " ▐█▄▪▐█▐███▌▐█ ▪▐▌██▐█▌██▐█▌▐█▄▄▌▐█•█▌ "   
echo -e "$green" "  ▀▀▀▀ ·▀▀▀  ▀  ▀ ▀▀ █▪▀▀ █▪ ▀▀▀ .▀  ▀$yellow 2.0"
echo ""
echo -e "$orange" "(-c) (switch activated , checking User Ip List ...)"
splt
else
vl="$defdir/msfip"
chkf
fi
else
echo -e "$yellow" "Path for $2 is not correct ."
echo ""
echo -e "$green" "Using default file in case exists ."
if [ ! -f $vl ]
then
echo ""
echo -e "$red" "Vulnerable file does not exist yet."
exit 1
else
cp $defdir/vuln.txt $defdir/vuln.bak >/dev/null 2>&1
cp $defdir/vuln_OS.txt $defdir/vuln_OS.bak >/dev/null 2>&1
cp $defdir/vuln_DP.txt $defdir/vuln_DP.bak >/dev/null 2>&1
rm -f $defdir/vuln_OS.txt >/dev/null 2>&1
rm -f $defdir/vuln_DP.txt >/dev/null 2>&1
msfi="$defdir/msfip"
tempf=`tail -n+3 $vl | sed -e "s/:445//g"`
echo $tempf > $defdir/vuln1.txt
tr " " "\n" <$defdir/vuln1.txt >$msfi
rm -f $defdir/vuln1.txt >/dev/null 2>&1
vl="$defdir/vuln.txt"
chkf
fi
fi
fi
fi
if [ $1 == "-s" ]
then
if [ -z "$2" ]
then
echo "Invalid argument , write ./escan -h for help"
exit 1
else
if [ "$2" -ge 100 -a "$2" -le 100000000 ]
then
rt="$2"
if [ -z "$3" ]
then
start
else
echo "Invalid argument , write ./escan -h for help"
exit 1
fi
fi
fi
fi